import os
import random
import logging
import uuid
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, CallbackContext, CallbackQueryHandler,
    MessageHandler, Filters, ConversationHandler
)
from sqlalchemy import create_engine, Column, Integer, String, Boolean, func
from sqlalchemy.orm import sessionmaker, declarative_base

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
CHANNEL_ID = os.getenv("CHANNEL_ID", "")
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///bot.db")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
VIDEO_PRICE = 2
REFERRAL_REWARD = 10
ADMIN_STATES = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
Base = declarative_base()
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)

class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, unique=True)
    username = Column(String(100), default="")
    first_name = Column(String(100), default="")
    balance = Column(Integer, default=0)
    referral_code = Column(String(10), unique=True)
    invited_by = Column(Integer, default=0)
    is_admin = Column(Boolean, default=False)
    is_subscribed = Column(Boolean, default=False)
    join_date = Column(String(10), default=datetime.now().strftime("%Y-%m-%d"))

class Video(Base):
    __tablename__ = 'videos'
    id = Column(Integer, primary_key=True)
    file_id = Column(String(200))
    added_date = Column(String(10), default="")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(engine)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def check_subscription(user_id: int, context: CallbackContext) -> bool:
    if not CHANNEL_ID:
        return True
    try:
        member = context.bot.get_chat_member(CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"Subscription check failed: {e}")
        return False

def subscription_required(func):
    def wrapper(update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        
        if update.message.text.startswith('/start'):
            return func(update, context)
            
        session = Session()
        user = session.query(User).filter_by(user_id=user_id).first()
        
        if not user:
            update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å /start")
            return
            
        if not user.is_subscribed:
            user.is_subscribed = check_subscription(user_id, context)
            session.commit()
            
        if not user.is_subscribed:
            show_subscription_alert(update)
            return
            
        return func(update, context)
    return wrapper

def show_subscription_alert(update: Update):
    keyboard = [
        [InlineKeyboardButton("üî• –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")]
    ]
    update.message.reply_text(
        "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def create_main_menu(is_admin=False):
    menu = [
        ["üé¨ –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ", "üí∞ –ë–∞–ª–∞–Ω—Å"],
        ["üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "‚ÑπÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ"]
    ]
    if is_admin:
        menu.append(["‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"])
    return ReplyKeyboardMarkup(menu, resize_keyboard=True)

def notify_referrer(referrer_id: int, new_user: str, context: CallbackContext):
    try:
        context.bot.send_message(
            referrer_id,
            f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {new_user}!\n"
            f"üíé +{REFERRAL_REWARD} –º–æ–Ω–µ—Ç –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!"
        )
    except Exception as e:
        logger.error(f"Referral notification failed: {e}")

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
@subscription_required
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name
    session = Session()
    user = session.query(User).filter_by(user_id=user_id).first()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        ref_code = context.args[0] if context.args else None
        referral_code = str(uuid.uuid4())[:8]
        invited_by = 0
        
        if ref_code:
            inviter = session.query(User).filter_by(referral_code=ref_code).first()
            if inviter:
                invited_by = inviter.user_id
                inviter.balance += REFERRAL_REWARD
                session.commit()
                notify_referrer(inviter.user_id, user_name, context)
        
        new_user = User(
            user_id=user_id,
            username=update.effective_user.username,
            first_name=update.effective_user.first_name,
            referral_code=referral_code,
            invited_by=invited_by,
            is_admin=(user_id == ADMIN_ID)
        session.add(new_user)
        session.commit()
        user = new_user
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    ref_link = f"https://t.me/{context.bot.username}?start={user.referral_code}"
    menu = create_main_menu(user.is_admin)
    
    update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n"
        f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}\n\n"
        f"üé¨ –í–∏–¥–µ–æ: {VIDEO_PRICE} –º–æ–Ω–µ—Ç | üë• –†–µ—Ñ–µ—Ä–∞–ª: +{REFERRAL_REWARD} –º–æ–Ω–µ—Ç",
        reply_markup=menu
    )

@subscription_required
def get_video(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = Session()
    user = session.query(User).filter_by(user_id=user_id).first()
    
    if not user:
        return start(update, context)
        
    if user.balance < VIDEO_PRICE:
        update.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {VIDEO_PRICE}\n"
            f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance}\n\n"
            f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ +{REFERRAL_REWARD} –º–æ–Ω–µ—Ç!"
        )
        return
        
    video = session.query(Video).order_by(func.random()).first()
    if not video:
        update.message.reply_text("üò¢ –í–∏–¥–µ–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –≤ –±–∞–∑–µ")
        return
        
    context.bot.send_video(
        chat_id=user_id,
        video=video.file_id,
        caption=f"üé• –í–∞—à–µ –≤–∏–¥–µ–æ!\nüíé –°–ø–∏—Å–∞–Ω–æ: {VIDEO_PRICE} –º–æ–Ω–µ—Ç"
    )
    
    user.balance -= VIDEO_PRICE
    session.commit()
    
    update.message.reply_text(
        f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\nüíé –û—Å—Ç–∞—Ç–æ–∫: {user.balance} –º–æ–Ω–µ—Ç\n\n"
        "–•–æ—Ç–∏—Ç–µ –µ—â—ë? –ù–∞–∂–º–∏—Ç–µ üé¨ –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ"
    )

@subscription_required
def user_info(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = Session()
    user = session.query(User).filter_by(user_id=user_id).first()
    
    if not user:
        return start(update, context)
        
    ref_count = session.query(User).filter_by(invited_by=user_id).count()
    
    update.message.reply_text(
        f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üÜî ID: {user.user_id}\n"
        f"üë§ –ò–º—è: {user.first_name}\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}\n"
        f"üîó –ö–æ–¥: {user.referral_code}\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.join_date}"
    )

# –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
@subscription_required
def admin_panel(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    session = Session()
    user = session.query(User).filter_by(user_id=user_id).first()
    
    if not user or not user.is_admin:
        update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
        
    keyboard = [
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
        ["üé¨ –í–∏–¥–µ–æ", "üíé –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã"],
        ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    update.message.reply_text(
        "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

@subscription_required
def admin_stats(update: Update, context: CallbackContext):
    session = Session()
    total_users = session.query(User).count()
    total_videos = session.query(Video).count()
    new_today = session.query(User).filter(
        User.join_date == datetime.now().strftime("%Y-%m-%d")
    ).count()
    
    update.message.reply_text(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üë§ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_today}\n"
        f"üé¨ –í–∏–¥–µ–æ –≤ –±–∞–∑–µ: {total_videos}"
    )

@subscription_required
def add_coins_start(update: Update, context: CallbackContext):
    update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    return "GET_USER"

def add_coins_get_user(update: Update, context: CallbackContext):
    try:
        user_id = int(update.message.text)
        session = Session()
        user = session.query(User).filter_by(user_id=user_id).first()
        
        if not user:
            update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ConversationHandler.END
            
        ADMIN_STATES[update.effective_user.id] = {"target_user": user_id}
        update.message.reply_text(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\nüíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç:")
        return "GET_AMOUNT"
    except ValueError:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return "GET_USER"

def add_coins_get_amount(update: Update, context: CallbackContext):
    try:
        amount = int(update.message.text)
        if amount <= 0:
            update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
            return "GET_AMOUNT"
            
        admin_id = update.effective_user.id
        user_id = ADMIN_STATES.get(admin_id, {}).get("target_user")
        
        if not user_id:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏")
            return ConversationHandler.END
            
        session = Session()
        user = session.query(User).filter_by(user_id=user_id).first()
        admin = session.query(User).filter_by(user_id=admin_id).first()
        
        if user and admin:
            user.balance += amount
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                context.bot.send_message(
                    user_id,
                    f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º {amount} –º–æ–Ω–µ—Ç!\n"
                    f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}"
                )
            except:
                pass
            
            update.message.reply_text(
                f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name}!\n"
                f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}"
            )
        else:
            update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except ValueError:
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return "GET_AMOUNT"
        
    return ConversationHandler.END

@subscription_required
def add_video(update: Update, context: CallbackContext):
    update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º:")
    return "GET_VIDEO"

def handle_video(update: Update, context: CallbackContext):
    video = update.message.video
    if not video:
        update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º")
        return "GET_VIDEO"
        
    session = Session()
    new_video = Video(
        file_id=video.file_id,
        added_date=datetime.now().strftime("%Y-%m-%d")
    )
    session.add(new_video)
    session.commit()
    
    total_videos = session.query(Video).count()
    update.message.reply_text(f"‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: {total_videos}")
    return ConversationHandler.END

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
        
    updater = Updater(TOKEN)
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("admin", admin_panel))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.add_handler(MessageHandler(Filters.regex(r'üé¨ –ü–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ'), get_video))
    dp.add_handler(MessageHandler(Filters.regex(r'üí∞ –ë–∞–ª–∞–Ω—Å'), user_info))
    dp.add_handler(MessageHandler(Filters.regex(r'‚ÑπÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ'), user_info))
    dp.add_handler(MessageHandler(Filters.regex(r'‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'), admin_panel))
    dp.add_handler(MessageHandler(Filters.regex(r'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'), admin_stats))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    dp.add_handler(CallbackQueryHandler(
        lambda u,c: check_subscription_callback(u,c), 
        pattern="^check_sub$"
    ))
    
    # –ê–¥–º–∏–Ω-–¥–∏–∞–ª–æ–≥–∏
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(Filters.regex(r'üíé –í—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã'), add_coins_start),
            MessageHandler(Filters.regex(r'üé¨ –í–∏–¥–µ–æ'), add_video)
        ],
        states={
            "GET_USER": [MessageHandler(Filters.text, add_coins_get_user)],
            "GET_AMOUNT": [MessageHandler(Filters.text, add_coins_get_amount)],
            "GET_VIDEO": [MessageHandler(Filters.video, handle_video)]
        },
        fallbacks=[]
    )
    dp.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if 'RENDER' in os.environ:
        # –î–ª—è Render.com –∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö
        port = int(os.environ.get('PORT', 5000))
        updater.start_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=TOKEN,
            webhook_url=f"https://your-app-name.onrender.com/{TOKEN}"
        )
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook")
    else:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        updater.start_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")

    updater.idle()

if __name__ == "__main__":
    main()
